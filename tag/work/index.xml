<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Work | Academic</title>
    <link>https://aaandrievskaya.github.io/tag/work/</link>
      <atom:link href="https://aaandrievskaya.github.io/tag/work/index.xml" rel="self" type="application/rss+xml" />
    <description>Work</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 21 May 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://aaandrievskaya.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Work</title>
      <link>https://aaandrievskaya.github.io/tag/work/</link>
    </image>
    
    <item>
      <title>Report formatting</title>
      <link>https://aaandrievskaya.github.io/post/report-design/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate>
      <guid>https://aaandrievskaya.github.io/post/report-design/</guid>
      <description>&lt;h2 id=&#34;technical-rules&#34;&gt;Technical rules&lt;/h2&gt;
&lt;p&gt;Font size - at least 12 pt.
Font - Times New Roman. after one and a half intervals.
The text of the report should be printed with the following margins:
left - 30 mm,
right - 15 mm,
top and bottom - 20 mm.
The paragraph indent should be the same throughout the text of the report and equal to 1.25 cm.
Page numbering in Arabic numerals through (including appendices), in the center at the bottom without a dot. A special header for the title page (no number).
Headings of structural elements are placed in the middle of the line without a dot at the end and are printed in CAPITAL LETTERS without underlining. (SUMMARY, INTRODUCTION, MAIN PART, etc.)
Each structural element and each section of the body of the report starts on a new page.
The main part of the report should be divided into sections, subsections and paragraphs. Sections and subsections of the report should have headings. Headings of sections and subsections of the main part of the report should begin with a paragraph indent and placed after the serial number, printed with a CAPITAL LETTER, bold, not underlined, without a dot at the end. Paragraphs and subparagraphs can only have a serial number without a heading, starting with a paragraph indent.&lt;/p&gt;
&lt;p&gt;##Sample for numbering section and subsection headings&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3 PRINCIPLES, METHODS AND RESULTS OF THE DEVELOPMENT AND MAINTENANCE OF VINITI CLASSIFICATION SYSTEMS&lt;/strong&gt;
&lt;strong&gt;3.1 RUBRICATOR VINITI&lt;/strong&gt;
&lt;strong&gt;3.1.1 STRUCTURE AND FUNCTIONS OF THE RUBRICATOR&lt;/strong&gt;
&lt;strong&gt;3.1.2 RELATIONSHIP OF THE RUBRICATOR OF THE VINITIA GRNTI&lt;/strong&gt;
&lt;strong&gt;3.1.3 THE PLACE OF THE RUBRICATOR OF THE INDUSTRY OF KNOWLEDGE IN THE VINITI RUBRICATION SYSTEM&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;structural-elements-of-the-report&#34;&gt;Structural elements of the report&lt;/h2&gt;
&lt;p&gt;• TITLE SHEET
• LIST OF PERFORMERS (if the report is made by one executor, his position, academic degree, academic title, last name and initials should be indicated on the title page of the report. In this case, the structural element of the report &amp;ldquo;LIST OF PERFORMERS&amp;rdquo; is not drawn up)
• CONTENT
• TERMS AND DEFINITIONS
• LIST OF ABBREVIATIONS AND SYMBOLS
• INTRODUCTION
• MAIN PART OF THE REPORT
• CONCLUSION
• LIST OF USED SOURCES
• APPENDIX&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The introduction is the prologue of the entire study, it presents its model. Here the entire scientific apparatus is set out, which guides the researcher, performing search work. On its basis, the supervisor analyzes the quality of the performance of the essay, term paper or thesis and evaluates: how deeply the relevance of the topic is realized and understood, whether the goal has been achieved, whether the research methods have been chosen correctly and whether they have been used correctly, etc.&lt;/p&gt;
&lt;p&gt;The composition of the Introduction is a description of the scientific apparatus, which depends on what kind of work is being done. If an abstract is being written, then the Introduction will describe the relevance of the topic, the purpose of the abstract, the subject and methods of research. If this is a term paper, then the Introduction, in addition to those components that are included in the abstract, will also include a description of the object and objectives of the study. The thesis describes the entire scientific apparatus. So the student, from work to work, gradually masters the technology of designing scientific research in forms accessible to him.&lt;/p&gt;
&lt;p&gt;The volume of the Introduction is approximately 1/10 of the entire volume of the work, that is, the specific text of the abstract, term paper or thesis. Place of Introduction - it is located immediately after the Table of Contents before the main part.&lt;/p&gt;
&lt;p&gt;Requirements for writing an Introduction:&lt;/p&gt;
&lt;p&gt;a) Introduction is printed on separate pages;&lt;/p&gt;
&lt;p&gt;b) it is not numbered either in the Table of Contents or in the text, but goes as an independent part of the work;&lt;/p&gt;
&lt;p&gt;c) all components of the scientific apparatus are highlighted in type or underlined;&lt;/p&gt;
&lt;p&gt;d) each component is written from a new line.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;The relevance of the study is determined by the fact that &amp;hellip;;&lt;/p&gt;
&lt;p&gt;The purpose of the study is to develop a set of methods &amp;hellip;;&lt;/p&gt;
&lt;p&gt;The subject of the study is the methods of educating observation&amp;hellip;&lt;/p&gt;
&lt;p&gt;When writing the Introduction, we recommend paying special attention to the relevance of the research topic. This is, in fact, a patent research work to find a state or regional order for your topic, to determine the place of the topic in the scientific world, in relation to practice.&lt;/p&gt;
&lt;p&gt;Be vigilant - reading the Introduction begins the evaluation of your work. Everyone reads the introduction, especially opponents. By its quality, they judge all the work, the level of professional training, responsibility, the ability to design their work and carry it out thoughtfully, and many other qualities of a specialist.&lt;/p&gt;
&lt;h2 id=&#34;the-main-part&#34;&gt;The main part&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;The main part&amp;rdquo; is the conditional name of the description of the entire study, that is, the substantive part of the abstract, term paper or thesis. This is what is being built on the basis of the designed scientific apparatus. Here everything should be subordinated to the achievement of the goal of transforming the subject of research by the methods you have chosen. Everything that was designed and described in the Introduction begins to &amp;ldquo;work&amp;rdquo; here.&lt;/p&gt;
&lt;p&gt;To write the main part, a text plan is drawn up as a list of the main provisions to be disclosed. Any plan of written text consists of chapters, paragraphs and subparagraphs. Their number depends on the amount of material and the nature of the text, the characteristics of the academic discipline, within and on the basis of which the work is performed. The general requirement is that they be proportional to each other in terms of volume and degree of complexity of the content. In addition, the number of paragraphs in chapters and subparagraphs in paragraphs must certainly be at least two. A chapter cannot consist of one paragraph, and a paragraph of one subparagraph.&lt;/p&gt;
&lt;p&gt;The titles (titles) of chapters, paragraphs and subparagraphs may not coincide with each other or with the topic. The words &amp;ldquo;Main part&amp;rdquo; are not included in any of the headings, since this is the conditional name of the entire text according to its purpose in the work. The titles of all chapters, paragraphs and subparagraphs are constructed meaningfully, reflecting the ideas disclosed in them. Their purpose is to direct the attention of both the writer and the reader to a specific idea, specific material.&lt;/p&gt;
&lt;p&gt;The construction of the main part of the abstract depends on its volume, content features and the goal. Most often, the abstract has no chapters, but only paragraphs without further division into subparagraphs. The abstract may not have any division into parts at all, but be performed as a holistic work, but with the internal logic of presenting the content. The paragraphs highlighted in the abstract do not have a common heading, such for them is the topic of the abstract, which is on the title page.&lt;/p&gt;
&lt;p&gt;The construction of the main part of the course work in more detail than the abstract. It contains at least two chapters. The chapters are divided into paragraphs. Subparagraphs are almost never used here. Each chapter has its own meaningful title, as does each paragraph. If the content of the chapters cannot be divided into paragraphs, then the chapters are simplified to paragraphs, that is, they are not introduced at all. As a rule, term papers are divided into two chapters - theoretical and empirical, devoted either to generalization of work experience or a small experiment. It is possible to write a term paper only on theoretical or only on empirical material. It depends on the topic, on the goals and objectives, as well as on the supervisor. Recall that the theoretical part of the work cannot bear such names as &amp;ldquo;Main Part&amp;rdquo;, &amp;ldquo;Theoretical Part&amp;rdquo; or &amp;ldquo;Literature Review&amp;rdquo;. Its headings are formulated in a meaningful, problematic way in accordance with a specific topic and methods of working on a theory.&lt;/p&gt;
&lt;p&gt;The construction of the main part of the thesis is even more complex. The thesis work may consist of more chapters, for example, four. The first chapter, as a rule, is devoted to theoretical issues, the second - to the description of the experiment program, the third - to conducting the experiment and discussing its results, the fourth - to the development of methodological recommendations. A combination of the second and third chapters is possible. Perhaps the absence of the fourth chapter. Everything depends again on the characteristics of the topic, goals and objectives, the chosen methods and recommendations of the supervisor.&lt;/p&gt;
&lt;p&gt;In the thesis work, each chapter ends with a special section that does not have its own numbering, namely - Conclusions on the chapter. These conclusions summarize the material presented in the paragraphs of the chapter and allow one to obtain new conclusions that are different from those already known in science, or to confirm them on new research material. Chapter conclusions are a sequence of statements consisting of premises and previously proven statements. This respects the logical law of sufficient reason, according to which every judgment must be justified by others, the truth of which has been proven by you or someone else. Chapter inferences can be drawn inductively and deductively. Requirements for conclusions by chapters: consistency, compliance with the content of the chapter and novelty.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Each study has a Conclusion as an epilogue of the work, as its final part. The purpose of the Conclusion is to show that the goal set for the study has been achieved, and the hypothesis has been proven.&lt;/p&gt;
&lt;p&gt;Types of Conclusion: summary, conclusions and conclusion itself. A summary is a brief description of the work done, performed as a list of what has been done and conclusions by chapter. Most often used in referencing. Conclusions are already new judgments, or rather conclusions made on the material of theory or empiricism. In the conclusions, theoretical or empirical material serves only as a basis for new ideas, judgments, provisions, recommendations. Most often, conclusions are drawn where the authors of the papers have their own judgments and apply various methods of analyzing scientific papers and practice. The conclusion is a complex form of completing the study, which includes both a summary and conclusions. In addition, the Conclusion includes an assessment of the theoretical and practical significance of the work, which may go beyond the topic.&lt;/p&gt;
&lt;p&gt;The choice of the type of Conclusion depends on:&lt;/p&gt;
&lt;p&gt;the complexity of the work (for an abstract, a summary is enough, for a term paper - conclusions, and for a diploma - a conclusion);
on the nature of the content of the work, that is, on what methods of working with it were used: the more complex the methods and the less compiling work, the more expedient it is to choose conclusions and even a conclusion;
the author&amp;rsquo;s possession of the technology for performing these types of completion of his research.
The construction of the Conclusion depends on the selected view. In its most complete form, it is built approximately according to this plan:&lt;/p&gt;
&lt;p&gt;statement about the achievement of the purpose of the study and evidence;
hypotheses with brief confirmations;
summary as the shortest overview of the work done;
new provisions (ideas, judgments, assessments) obtained as a result of the study;
determination of the scientific novelty of the work done;
determination of the practical significance of the work done.
According to the style of writing The conclusion should be concise, clear, logical, evidence-based, convincing. It must be remembered that both the supervisor and opponents who give feedback on the work are most attentive to it, as well as to the Introduction.&lt;/p&gt;
&lt;p&gt;The volume of the Conclusion is determined by the nature of the work. But there is a conditional standard. Like the Introduction, it is given no more than 1/10 of the entire text.&lt;/p&gt;
&lt;h2 id=&#34;list-of-sources-used&#34;&gt;List of sources used&lt;/h2&gt;
&lt;p&gt;The list of references completes the description of the study. Often it is called the Bibliography, which is not correct. The list of references follows the Conclusion and is drawn up from a new page.&lt;/p&gt;
&lt;p&gt;The amount of literature included in the List depends on the form of research work. For an abstract, the standard is at least 5 works, for a term paper - at least 10, for a thesis - at least 25.&lt;/p&gt;
&lt;p&gt;The literature included in the List is published theoretical sources, legal documents, as well as archival materials. Handwritten materials with the indication &amp;ldquo;Manuscript&amp;rdquo; can be entered here. Not only cited literature is included, but also read literature that is directly related to the topic under study. All authors and their works indicated in the text should be included in this list, especially cited works.&lt;/p&gt;
&lt;p&gt;The List of References should include works on the study of your topic by teachers, psychologists, sociologists, historians, philosophers and other specialists working at your university. You are called to contribute to the development of science in your alma mater.&lt;/p&gt;
&lt;p&gt;All literature is drawn up strictly in alphabetical order, according to the first letter of the author&amp;rsquo;s last name or the first letter of the title of a document or collective work that does not have a strict authorship. Each work is assigned its own serial number, which is then referenced in the text of the work when citing.&lt;/p&gt;
&lt;p&gt;Each source included in the List of References has a specific design. In addition to the author&amp;rsquo;s name and the title of the work, the output data is indicated. They include: the place of publication, the name of the publisher or organization that published the work, and the year of publication. In addition, the number of pages in the text is indicated.&lt;/p&gt;
&lt;p&gt;Literature is drawn up strictly taking into account the requirements of GOST.&lt;/p&gt;
&lt;h2 id=&#34;appendix&#34;&gt;Appendix&lt;/h2&gt;
&lt;p&gt;The appendix is ​​a material that clarifies, illustrates, confirms certain provisions of your study and is not included in the text of the main part. It has a complementary meaning. The application, as a rule, is used in theses and rarely in abstracts and term papers, its composition is determined by the researcher&amp;rsquo;s intention.&lt;/p&gt;
&lt;p&gt;Types of Applications: copies of plans and programs, photographs, texts of tests and questionnaires, samples of children&amp;rsquo;s drawings and essays, reports, reports, documents or extracts from them, charters, regulations, etc.&lt;/p&gt;
&lt;p&gt;As a rule, Applications are made only if there are at least two of them. For one Application, it is not entered. Each Appendix cannot be more than five pages long.&lt;/p&gt;
&lt;p&gt;Only those materials that are referenced in the Main Text are included in the Appendix. Communication of the main text and the Appendix is ​​obligatory.&lt;/p&gt;
&lt;p&gt;Each Appendix has its own number (without indicating the sign No.), is placed at the end of the work with the continuation of the general page numbering. Applications are arranged in order of reference to them in the text of the work (see any Appendix of this book).&lt;/p&gt;
&lt;p&gt;Each Application is issued separately. In the right corner of the first page it is written: &amp;ldquo;Appendix 1&amp;rdquo;, &amp;ldquo;Appendix 2&amp;rdquo;, etc.&lt;/p&gt;
&lt;p&gt;Statistical tables, diagrams of experiments are not included in the Appendix, they are included directly in the text.&lt;/p&gt;
&lt;p&gt;Application material is not included in the scope of work. Each Appendix is ​​entered in the Table of Contents under its own number and with its own name.&lt;/p&gt;
&lt;p&gt;The total volume of the Appendix should not exceed one third of the volume of the entire text of the work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Markdown language.</title>
      <link>https://aaandrievskaya.github.io/post/markdown-language/</link>
      <pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate>
      <guid>https://aaandrievskaya.github.io/post/markdown-language/</guid>
      <description>&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;
&lt;p&gt;Markdown is a simple markup language used to create rich text (such as HTML) with a text editor. It allows you to add basic formatting to text using characters known and available on all keyboards. Font size, color, and other advanced options are not available in Markdown.&lt;/p&gt;
&lt;h2 id=&#34;markdown-syntax&#34;&gt;Markdown Syntax&lt;/h2&gt;
&lt;p&gt;This is a quick reference to the basic elements of Markdown syntax. There is no single standard, and different versions of Markdown may differ in details. But the basic elements from the list below are supported in all standards.&lt;/p&gt;
&lt;h2 id=&#34;text-selection&#34;&gt;Text selection&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;This text will be italicized&lt;/em&gt;
&lt;em&gt;This text will be italic (italic)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This text will be bold&lt;/strong&gt;
&lt;strong&gt;This text will be bold&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You can &lt;strong&gt;insert&lt;/strong&gt; one type into another&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;titles&#34;&gt;Titles&lt;/h2&gt;
&lt;p&gt;&amp;lsquo;# This is the largest heading, it turns into an &lt;h1&gt; tag
&amp;lsquo;## &lt;h2&gt;
&amp;lsquo;### &lt;h3&gt;
&amp;lsquo;#### &lt;h4&gt;
&amp;lsquo;##### &lt;h5&gt;
&amp;lsquo;###### &lt;h6&gt;&lt;/p&gt;
&lt;p&gt;In Markdown, headings are written without the symbol &#39;&lt;/p&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hexlet.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hexlet.io&lt;/a&gt; - the text of a simple link will become a clickable link automatically
You can make any text a link:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hexlet.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;This is a Hexlet link&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;quote&#34;&gt;Quote&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;That&amp;rsquo;s a wise quote
wise man.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;pictures&#34;&gt;Pictures&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://aaandrievskaya.github.io/assets/images/markdown/markdown.png&#34; alt=&#34;This is optional alt text&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;the-code&#34;&gt;The code&lt;/h2&gt;
&lt;p&gt;To highlight code (or any unformatted text), special characters are used - back ticks: `&lt;/p&gt;
&lt;p&gt;Sometimes you need to add a piece of code &lt;code&gt;function(12);&lt;/code&gt; to a regular line of text.
And sometimes you need to insert a whole block of code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;lists&#34;&gt;Lists&lt;/h2&gt;
&lt;p&gt;Unnumbered list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Paragraph
*One more item
&lt;ul&gt;
&lt;li&gt;Subparagraph&lt;/li&gt;
&lt;li&gt;Another sub-item
Numbered list:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Item&lt;/li&gt;
&lt;li&gt;One more point&lt;/li&gt;
&lt;li&gt;Subparagraph&lt;/li&gt;
&lt;li&gt;One more subparagraph
You can use any numbers in a numbered list - it doesn&amp;rsquo;t matter. When converted to HTML or another format, the numbers will become correct and consistent (1, 2, 3, etc.).&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Version management. Git</title>
      <link>https://aaandrievskaya.github.io/post/version-control.-git/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
      <guid>https://aaandrievskaya.github.io/post/version-control.-git/</guid>
      <description>&lt;h2 id=&#34;version-control-systems-general-concepts&#34;&gt;Version control systems. General concepts&lt;/h2&gt;
&lt;p&gt;Version control systems (VCS) are used when several people work on the same project. Usually the main project tree is stored in the local
or a remote repository to which access is configured for project members. At
making changes to the content of the project, the version control system allows them to
fix, combine changes made by different project participants,
rollback to any earlier version of the project, if required.
Classical version control systems use a centralized model,
assuming a single repository for storing files. Most of the version control functions are performed by a dedicated server.
The project participant (user) before starting work through certain
command gets the version of files it needs. After making changes, the user
commits the new version to the repository. This does not remove previous versions.
from the central repository and you can return to them at any time. The server can
save not the full version of the changed files, but produce the so-called delta compression - save only changes between successive versions, which
allows you to reduce the amount of stored data.
Version control systems support traceability and resolution
conflicts that may arise when several people work on one
file. You can merge (merge) the changes made by different participants (automatically or manually), manually select the desired version, undo the changes altogether
or lock files for modification. Depending on the settings, blocking is not
allows other users to get a working copy or prevents modification
working copy of the file by means of the OS file system, thus providing
privileged access to only one user working with the file.
Version control systems can also provide additional, more flexible
functionality. For example, they can support working with multiple versions of the same file, keeping a common history of changes up to the branch point.
versions and each branch&amp;rsquo;s own change histories. In addition, it is usually available
information about which of the participants, when and what changes were made. Usually this
kind of information is stored in the change log, access to which can be restricted.
Unlike classical ones, in distributed version control systems, the central
the repository is optional.
Among the classic VCS, CVS, Subversion are the most famous, and among the distributed ones - Git, Bazaar, Mercurial. The principles of their work are similar, they differ mainly
the syntax of the commands used in the work.&lt;/p&gt;
&lt;h2 id=&#34;basic-git-commands&#34;&gt;Basic git commands&lt;/h2&gt;
&lt;p&gt;The most commonly used git commands are:
– creating the main repository tree:&lt;/p&gt;
&lt;p&gt;1 git init&lt;/p&gt;
&lt;p&gt;– receiving updates (changes) of the current tree from the central repository:&lt;/p&gt;
&lt;p&gt;1 git pull&lt;/p&gt;
&lt;p&gt;– sending all the changes made to the local tree to the central repository:&lt;/p&gt;
&lt;p&gt;1 git push&lt;/p&gt;
&lt;p&gt;– view the list of changed files in the current directory:&lt;/p&gt;
&lt;p&gt;1 git status&lt;/p&gt;
&lt;p&gt;– view current changes:&lt;/p&gt;
&lt;p&gt;1 git diff&lt;/p&gt;
&lt;p&gt;– saving current changes:
– add all modified and/or created files and/or directories:&lt;/p&gt;
&lt;p&gt;1 git add .&lt;/p&gt;
&lt;p&gt;– add specific modified and/or created files and/or directories:&lt;/p&gt;
&lt;p&gt;1 git add filenames&lt;/p&gt;
&lt;p&gt;– delete a file and/or directory from the repository index (in this case, the file and/or directory
remains in the local directory):&lt;/p&gt;
&lt;p&gt;1 git rm filenames&lt;/p&gt;
&lt;p&gt;– saving the added changes:
– save all added changes and all modified files:&lt;/p&gt;
&lt;p&gt;1 git commit -am &amp;lsquo;Commit description&amp;rsquo;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;save the added changes with a comment through the built-in
editor:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1 git commit&lt;/p&gt;
&lt;p&gt;– creating a new branch based on the current one:&lt;/p&gt;
&lt;p&gt;1 git checkout -b branchname&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;switch to some branch:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1 git checkout branch_name&lt;/p&gt;
&lt;p&gt;(when you switch to a branch that is not yet in the local repository, it will be
created and linked to the remote)
– pushing changes of a specific branch to the central repository:&lt;/p&gt;
&lt;p&gt;1 git push origin branchname&lt;/p&gt;
&lt;p&gt;– merge the branch with the current tree:&lt;/p&gt;
&lt;p&gt;1 git merge &amp;ndash;no-ff branchname&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;deleting a branch:
– deleting a local branch already merged with the main tree:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1 git branch -d branchname&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;forced deletion of the local branch:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1 git branch -D branchname&lt;/p&gt;
&lt;p&gt;– deleting a branch from the central repository:&lt;/p&gt;
&lt;p&gt;1 git push origin :branchname&lt;/p&gt;
&lt;h2 id=&#34;standard-operating-procedures-for-a-central-repository&#34;&gt;Standard Operating Procedures for a Central Repository&lt;/h2&gt;
&lt;p&gt;The work of the user with his branch begins with checking and receiving changes
from the central repository (at the same time, to the local tree before starting this procedure
should not be changed):&lt;/p&gt;
&lt;p&gt;1 git checkout master
2 git-pull
3 git checkout -b branchname&lt;/p&gt;
&lt;p&gt;You can then make changes in the local tree and/or branch.
After the completion of making some change to the files and / or directories of the project
you need to place them in the central repository. To do this, you need to check,
which files have changed so far:&lt;/p&gt;
&lt;p&gt;1 git status&lt;/p&gt;
&lt;p&gt;and, if necessary, delete unnecessary files that we do not want to send to the central repository.
Then it is useful to review the text of the changes for compliance with the rules for maintaining clean commits:&lt;/p&gt;
&lt;p&gt;1 git diff&lt;/p&gt;
&lt;p&gt;If some files should not be included in the commit, then we mark only those files that
whose changes you want to save. To do this, use the commands add and/or
deletion with the necessary options:&lt;/p&gt;
&lt;p&gt;1 git add &amp;hellip;
2 git rm &amp;hellip;&lt;/p&gt;
&lt;p&gt;If you want to save all changes in the current directory, then use:&lt;/p&gt;
&lt;p&gt;1 git add .&lt;/p&gt;
&lt;p&gt;Then we save the changes, explaining what was done:&lt;/p&gt;
&lt;p&gt;1 git commit -am &amp;ldquo;Some commit message&amp;rdquo;&lt;/p&gt;
&lt;p&gt;and send it to the central repository:&lt;/p&gt;
&lt;p&gt;1 git push origin branchname
or
1 git push&lt;/p&gt;
&lt;h2 id=&#34;working-with-a-local-repository&#34;&gt;Working with a local repository&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s create a local repository.
First, let&amp;rsquo;s make a preliminary configuration by specifying the name and email of the owner of the repository:&lt;/p&gt;
&lt;p&gt;1 git config &amp;ndash;global user.name &amp;ldquo;FirstName LastName&amp;rdquo;
2 git config &amp;ndash;global user.email &amp;ldquo;work@mail&amp;rdquo;&lt;/p&gt;
&lt;p&gt;and setting utf-8 in git output:&lt;/p&gt;
&lt;p&gt;1 git config &amp;ndash;global quotepath false&lt;/p&gt;
&lt;p&gt;To initialize a local repository located, for example, in a directory
~/tutorial must be typed on the command line:&lt;/p&gt;
&lt;p&gt;1 cd
2 mkdir tutorial
3 cd tutorial
4 git init&lt;/p&gt;
&lt;p&gt;After that, a .git directory will appear in the tutorial directory, in which it will be stored
change history.
Let&amp;rsquo;s create a test text file hello.txt and add it to the local repository:&lt;/p&gt;
&lt;p&gt;1 echo &amp;lsquo;hello world&amp;rsquo; &amp;gt; hello.txt
2 git add hello.txt
3 git commit -am &amp;lsquo;New file&amp;rsquo;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use the status command to view the changes in the working directory since the last revision:&lt;/p&gt;
&lt;p&gt;1 git status&lt;/p&gt;
&lt;p&gt;While working on a project, one way or another, files can be created that are not
needs to be added to the repository later. For example, temporary files created by editors or object files created by compilers. Can prescribe templates of file types ignored when adding to the repository in the file .gitignore with services. To do this, you first need to get a list of available
templates:&lt;/p&gt;
&lt;p&gt;curl -L -s &lt;a href=&#34;https://www.gitignore.io/api/list&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.gitignore.io/api/list&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then download the template, for example, for C and C++&lt;/p&gt;
&lt;p&gt;curl -L -s &lt;a href=&#34;https://www.gitignore.io/api/c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.gitignore.io/api/c&lt;/a&gt; &amp;raquo; .gitignore
curl -L -s &lt;a href=&#34;https://www.gitignore.io/api/c&amp;#43;&amp;#43;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.gitignore.io/api/c++&lt;/a&gt; &amp;raquo; .gitignore&lt;/p&gt;
&lt;h2 id=&#34;working-with-the-repository-server&#34;&gt;Working with the repository server&lt;/h2&gt;
&lt;p&gt;For subsequent user identification on the repository server, it is necessary
generate a key pair (private and public):&lt;/p&gt;
&lt;p&gt;1 ssh-keygen -C &amp;ldquo;First Name Last Name &lt;a href=&#34;mailto:work@mail&#34;&gt;work@mail&lt;/a&gt;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The keys are stored in the ~/.ssh/ directory.
There are several repository servers available with the option of free
data placement. For example, &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/&lt;/a&gt;.
To work with it, you must first create an account on the website &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/&lt;/a&gt;. Then you need to upload the public key we generated earlier. For
To do this, go to &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/&lt;/a&gt; under your account and go to the GitHub setting menu. After that, select SSH keys in the GitHub setting side menu and click
the Add Key button. By copying the key from the local console to the clipboard&lt;/p&gt;
&lt;p&gt;1 cat ~/.ssh/id_rsa.pub | xclip -sel clip&lt;/p&gt;
&lt;p&gt;paste the key into the field that appears on the site.
After that, you can create a repository on the site by selecting Repositories from the menu
Create a repository, give it a name and make it public (public).
To download the repository from the local directory to the server, execute the following
commands:&lt;/p&gt;
&lt;p&gt;1 git remote add origin
2 ssh://git@github.com/&lt;username&gt;/&lt;reponame&gt;.git
3 git push -u origin master&lt;/p&gt;
&lt;p&gt;Further, on the local computer, you can perform standard procedures for working
with git if there is a central repository.&lt;/p&gt;
&lt;h2 id=&#34;general-information&#34;&gt;General information&lt;/h2&gt;
&lt;p&gt;– Gitflow Workflow published and popularized by Vincent Driessen of Gitflow
vie.
– Gitflow Workflow involves building a strict branching model, taking into account
project release.
– This model is great for organizing a release-based workflow.
– Working on the Gitflow model includes creating a separate branch for bug fixes
in the working environment.
– The sequence of actions when working on the Gitflow model:
– The develop branch is created from the master branch.
– A release branch is created from the develop branch.
– Feature branches are created from the develop branch.
– When work on the feature branch is completed, it is merged into the develop branch.
– When work on a release branch is completed, it is merged into branches
develop and master.
– If a problem is found in master, a hotfix branch is created from master.
– When a hotfix branch is completed, it is merged into branches
develop and master.&lt;/p&gt;
&lt;h2 id=&#34;software-installation&#34;&gt;Software installation&lt;/h2&gt;
&lt;p&gt;– For Windows, the Chocolatey package manager is used. Git-flow is included
git package.&lt;/p&gt;
&lt;p&gt;1 choco install git&lt;/p&gt;
&lt;p&gt;– For MacOS, use the Homebrew package manager.&lt;/p&gt;
&lt;p&gt;1 brew install git-flow&lt;/p&gt;
&lt;p&gt;– Linux
– Gentoo&lt;/p&gt;
&lt;p&gt;1 emerge dev-vcs/git-flow&lt;/p&gt;
&lt;p&gt;– Ubuntu&lt;/p&gt;
&lt;p&gt;1 apt-get install git-flow&lt;/p&gt;
&lt;h2 id=&#34;work-process-with-gitflow&#34;&gt;Work process with Gitflow&lt;/h2&gt;
&lt;h3 id=&#34;main-branches-master-and-development-branches-develop&#34;&gt;Main branches (master) and development branches (develop)&lt;/h3&gt;
&lt;p&gt;To commit the history of the project within this process instead of a single master branch
two branches are used. The master branch holds the official release history, while the develop branch is for merging all the features. In addition, for convenience
it is recommended to give all commits in the master branch a version number.
When using the git-flow extension library, you need to initialize the structure in an existing repository:&lt;/p&gt;
&lt;p&gt;1 git flow init&lt;/p&gt;
&lt;p&gt;For github, the Version tag prefix should be set to v.
After that, check which branch you are on:&lt;/p&gt;
&lt;p&gt;1 git branch&lt;/p&gt;
&lt;h3 id=&#34;feature-branches&#34;&gt;Feature branches&lt;/h3&gt;
&lt;p&gt;Each new feature should have its own branch, which can be
send to the central repository for backup or sharing
team work. Feature branches are created not on the basis of master, but on the basis of develop.
When work on a feature is completed, the corresponding branch is merged back
with the develop branch. Features should not be pushed directly to the master branch.
Typically, feature branches are created from the latest develop branch.&lt;/p&gt;
&lt;h3 id=&#34;creating-a-feature-branch&#34;&gt;Creating a feature branch&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s create a new feature branch:&lt;/p&gt;
&lt;p&gt;1 git flow feature start feature_branch&lt;/p&gt;
&lt;p&gt;Further we work as usual&lt;/p&gt;
&lt;h3 id=&#34;end-of-work-on-a-feature-branch&#34;&gt;End of work on a feature branch&lt;/h3&gt;
&lt;p&gt;Upon completion of work on a feature
merge feature_branch with develop:&lt;/p&gt;
&lt;p&gt;1 git flow feature finish feature_branch&lt;/p&gt;
&lt;h3 id=&#34;release-branches&#34;&gt;Release branches&lt;/h3&gt;
&lt;p&gt;When the develop branch has enough features to release, the develop branch
a release branch is created. Creating this branch starts the next release cycle,
and from that moment on, new functions can no longer be added - only debugging is allowed,
creating documentation and solving other problems. When the release preparation is completed,
the release branch is merged into master and given a version number. After that, you need to merge with the develop branch, in which, since the creation of the release branch,
changes occur.
Due to the fact that a special branch is used for preparing releases, one
a team can refine the current release while another team continues
work on features for the next one.
You can create a new release branch with the following command:&lt;/p&gt;
&lt;p&gt;1 git flow release start 1.0.0&lt;/p&gt;
&lt;p&gt;The following commands are used to complete work on the release branch:&lt;/p&gt;
&lt;p&gt;1 git flow release finish 1.0.0&lt;/p&gt;
&lt;h3 id=&#34;hotfix-branches&#34;&gt;Hotfix branches&lt;/h3&gt;
&lt;p&gt;Support branches or hotfix branches are used for quick fixes
to working releases. They are created from the master branch. This is the only thread that
must be created directly from master. Once the fix is ​​complete,
the branch should be merged into master and develop. The master branch should be tagged with an updated version number.
Having a dedicated branch for fixing bugs allows the team to resolve issues without interrupting the rest of the workflow or waiting for the next cycle.
release.
A hotfix branch can be created with the following commands:&lt;/p&gt;
&lt;p&gt;1 git flow hotfix start hotfix_branch&lt;/p&gt;
&lt;p&gt;When finished, the hotfix branch is merged into master and develop:&lt;/p&gt;
&lt;p&gt;1 git flow hotfix finish hotfix_branch&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
